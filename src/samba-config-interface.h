/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./org.ukui.samba.config.xml -p SambaConfigInterface
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SAMBACONFIGINTERFACE_H
#define SAMBACONFIGINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.ukui.samba.config
 */
class SambaConfigInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ukui.samba.config"; }

public:
    SambaConfigInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~SambaConfigInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> addUserInGroup()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("addUserInGroup"), argumentList);
    }

    inline QDBusPendingReply<bool> hasPasswd()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("hasPasswd"), argumentList);
    }

    inline QDBusPendingReply<bool> init(const QString &name, int pid, int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(pid) << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("init"), argumentList);
    }

    inline QDBusPendingReply<bool> isSmbdLaunched()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("isSmbdLaunched"), argumentList);
    }

    inline QDBusPendingReply<bool> setPasswd(const QString &passwd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(passwd);
        return asyncCallWithArgumentList(QStringLiteral("setPasswd"), argumentList);
    }

    inline QDBusPendingReply<bool> userIsInSambaGroup()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("userIsInSambaGroup"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};
#endif
